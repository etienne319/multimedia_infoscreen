#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

"""
multimedia: play/change/stop sport stream on button event

 Copyright (C) 2018 Hendrik Hagendorn

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import json
import os
import signal
import socket
import sys
import time
from modules import registry, utils
from modules import *


class Dispatcher():
    SOCKET_ADDR = '/tmp/selector.ctrl'

    def __init__(self):
        self.module = None

    def init(self):
        signal.signal(signal.SIGTERM, self.sigterm_handler)
        signal.signal(signal.SIGINT, self.sigterm_handler)
        signal.signal(signal.SIGUSR1, self.sigusr1_handler)
        signal.signal(signal.SIGUSR2, self.sigusr2_handler)

        for meta in registry.get_all_metadata():
            utils.download_file(utils.prefix_tmp(meta['picon']), meta['picon_url'])

        for module in registry.get_all_modules():
            module.refresh()

    def run(self):
        try:
            os.unlink(self.SOCKET_ADDR)
        except OSError:
            if os.path.exists(self.SOCKET_ADDR):
                raise

        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.bind(self.SOCKET_ADDR)
        os.chmod(self.SOCKET_ADDR, 0o666)
        sock.listen(1)

        while True:
            connection, client_address = sock.accept()
            try:
                cmd = connection.recv(38).decode("utf-8")
                print('selector.ctrl: ' + cmd)

                if cmd == 'get modules':
                    modules = self.get_modules()
                    connection.sendall(json.dumps(modules).encode('utf-8'))
                elif cmd.startswith('get entries '):
                    entries = self.get_module_entries(cmd[12:])
                    connection.sendall(json.dumps(entries).encode('utf-8'))
                elif cmd == 'get entries':
                    entries = self.module.get_entries()
                    connection.sendall(json.dumps(entries).encode('utf-8'))
                elif cmd == 'up':
                    self.up()
                elif cmd == 'down':
                    self.down()
                elif cmd == 'select':
                    self.select()
                elif cmd.startswith('select module '):
                    self.module = self.get_module(cmd[14:])
                    if self.module:
                        self.module.init()
                elif cmd.startswith('select entry '):
                    selection_id = int(cmd[13:])
                    self.select(selection_id)
                elif cmd == 'exit':
                    self.exit()
            finally:
                connection.close()

    def reset(self):
        self.module = None
        utils.ib_notify('infoscreen/selector/visible', 'false')

    def get_modules(self):
        modules = []

        for metadata in registry.get_all_metadata():
            modules.append({
                'title': metadata['title'],
                'id': metadata['id']
            })

        return modules

    def get_module(self, module_id):
        for idx, metadata in enumerate(registry.get_all_metadata()):
            if metadata['id'] == module_id:
                return registry.get_all_modules()[idx]

        return None

    def get_module_entries(self, module_id):
        for idx, metadata in enumerate(registry.get_all_metadata()):
            if metadata['id'] == module_id:
                return registry.get_all_modules()[idx].get_entries()

        return []

    def up(self):
        print('up.')

        if self.module:
            self.module.up()

    def down(self):
        print('down.')

        if self.module:
            self.module.down()

    def select(self, selection_id=None):
        print('select.')

        if self.module:
            module = self.module.select(selection_id)
            if module:
                self.module = module
                self.module.init()
        else:
            self.module = registry.get_selector()
            self.module.init()

    def exit(self):
        print('exit.')

        if self.module:
            self.module.exit()

    def short_press(self):
        print('short press.')

        self.down()

    def long_press(self):
        print('long press.')

        self.select()

    def sigterm_handler(self, signal, frame):
        if self.module:
            self.module.terminate()

        print('bye.')
        sys.exit(0)

    def sigusr1_handler(self, signal, frame):
        print("usr1")

        if self.module:
            self.module.terminate()

    def sigusr2_handler(self, signal, frame):
        print("usr2")
        for module in registry.get_all_modules():
            module.refresh()

if __name__ == '__main__':
    dispatcher = Dispatcher()
    registry.register_dispatcher(dispatcher)
    dispatcher.init()
    dispatcher.run()
